# Form implementation generated from reading ui file 'task_page.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from utils.validators import TASK_ANSWER_VALIDATOR
from math import sin, cos, radians
import math

class VectorGroup(QtWidgets.QGraphicsItemGroup):
    def __init__(self, movable_rect, relative_rect1, relative_rect2):
        super().__init__()

        self.movable_rect = movable_rect
        self.relative_rect1 = relative_rect1
        self.relative_rect2 = relative_rect2

        # Add rectangles to the group
        self.addToGroup(movable_rect)
        self.addToGroup(relative_rect1)
        self.addToGroup(relative_rect2)

    def updateLength(self, transform, new_length):#student        
        self.movable_rect.setRect(QtCore.QRectF(0, -1, new_length, 2))
        new_relative_rect1_pos = QtCore.QPointF(0, new_length-transform)
        new_relative_rect2_pos = QtCore.QPointF(0, new_length-transform)
        # Apply the transformations to the relative rectangles
        self.relative_rect1.setTransform(self.getTransform(new_relative_rect1_pos))
        self.relative_rect2.setTransform(self.getTransform(new_relative_rect2_pos))
        
    def getTransform(self, point):#student
        transform = QtGui.QTransform()
        transform.translate(point.x(), point.y())
        return transform
    
class Ui_task_page(object):
    def __init__(self, static):
        super().__init__()
        self.static = static
        self.data = {}
        self.rectangle_list=[]
        self.text_list=[]
        self.ellipse_list=[]
        self.animation_list = []

    def screen_size(self, teacher_main_page):
        screen_geometry = QtWidgets.QApplication.primaryScreen().availableGeometry()
        width = screen_geometry.width()
        height = screen_geometry.height()
        if width >= self.static["window-size"]["width"] and height >= self.static["window-size"]["height"]:
            teacher_main_page.setMinimumSize(QtCore.QSize(self.static["window-size"]["width"], self.static["window-size"]["height"]))
            qr=teacher_main_page.frameGeometry()           
            cp=QtGui.QGuiApplication.primaryScreen().availableGeometry().center()
            qr.moveCenter(cp)
            teacher_main_page.move(qr.topLeft())
        else:
            teacher_main_page.setMinimumSize(QtCore.QSize(width, height))
            qr=teacher_main_page.frameGeometry()           
            cp=QtGui.QGuiApplication.primaryScreen().availableGeometry().center()
            qr.moveCenter(cp)
            teacher_main_page.move(qr.topLeft())
        
    def send_btn_text(self):
        _translate = QtCore.QCoreApplication.translate
        if self.answer_btn.text() == "Tovább":
            self.answer_btn.setText(_translate("task_page", "Küldés"))
            self.repeat_animation_btn.setHidden(True)
        else:
            self.answer_btn.setText(_translate("task_page", "Tovább"))
            self.repeat_animation_btn.setHidden(False)

    def rect(self, task_page, width, height, thickness):
        objects = self.data[task_page.index]['parameters']['objects']
        if objects == []:
            self.repeat_animation_btn.setHidden(True)
            return []
        texts = self.data[task_page.index]['parameters']['texts']
        animation_list=[]
        maximum_size_x = 0
        maximum_size_y = 0
        for name in objects:
            name[1].update({'x':name[1]['x'].replace('size_x', str(width))})
            name[1].update({'y':name[1]['y'].replace('size_y', str(height))})            
        for name in objects:
            if 'line' in name[0]:
                name[1].update({'length':name[1]['length'].replace('size_y', str(height))})
                name[1].update({'length':name[1]['length'].replace('size_x', str(width))})
            if '#' not in name[0]:
                if 'line' in name[0]:
                    length = eval(name[1]['length'])
                    length_x = abs(eval(name[1]['x']) + length * math.cos(math.radians(name[1]['angle'])))
                    length_y = abs(eval(name[1]['y']) + length * math.sin(math.radians(name[1]['angle'])))
                    maximum_size_x = max(maximum_size_x, length_x)
                    maximum_size_y = max(maximum_size_y, length_y)
                if 'rect' in name[0] or 'ellipse' in name[0]:
                    length_x = abs(eval(name[1]['x']) + eval(name[1]['width']))
                    length_y = abs(eval(name[1]['y']) + eval(name[1]['height']))
                    maximum_size_x = max(maximum_size_x, length_x)
                    maximum_size_y = max(maximum_size_y, length_y)
                scale = min(width/maximum_size_x, height/maximum_size_y)
        for name in objects:
            if "line" in name[0]:
                transform = QtGui.QTransform()
                x = eval(name[1]['x'])
                y = eval(name[1]['y'])
                length = eval(name[1]['length'])
                transform.translate(x, y)#pozícionálás

                t = ""
                for text_name in texts:
                    if name[0] == text_name:
                        if t == "":
                            t = t + f"{texts[name[0]]}"
                        else:
                            t = t + f", {texts[name[0]]}"
                if t!="":
                    font = QtGui.QFont()
                    font.setPointSize(12)                
                    textitem = self.scene.addText(t, font)
                    angle = name[1]['angle'] if name[1]['angle']>=0 else 360-name[1]['angle']
                    length_x = length*cos(radians(name[1]['angle']))/2*scale # length in x axis = start coordinate + length * cos( inclination angle )
                    length_y = length*sin(radians(name[1]['angle']))/2*scale # length in x axis = start coordinate + length * sin( inclination angle )
                    
                    if angle<=90 and angle>=0:
                        length_x += 10 * (angle/90)
                        length_y -= 30 * (1-angle/90)
                        textitem.setPos(transform.dx()+length_x, transform.dy()+length_y)
                    if angle>90 and angle<180:
                        length_x -= 110 * (1-angle/90/2) + len(t) * 4.5
                        length_y -= 40 * (angle/90/2)
                        textitem.setPos(transform.dx()+length_x, transform.dy()+length_y)
                    if angle>=180 and angle<=270:
                        length_y -= 50 * (1-angle/90/4)
                        textitem.setPos(transform.dx()+length_x, transform.dy()+length_y)
                    if angle>270 and angle<360:
                        textitem.setPos(transform.dx()+length_x, transform.dy()+length_y)

                length_x = length*cos(radians(name[1]['angle']))*scale # length in x axis = start coordinate + length * cos( inclination angle )
                length_y = length*sin(radians(name[1]['angle']))*scale # length in x axis = start coordinate + length * sin( inclination angle )
                name[1].update({'length':str(length*scale)}) #scale the length of the rectangle

                main_rect = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -thickness/2, float(name[1]['length']),  thickness))
                main_rect.setBrush(QtGui.QColor("black"))
                main_rect.setRotation(name[1]['angle'])
                main_rect.setTransform(transform)
                
                if name[1]["arrow"]=="none":
                    self.scene.addItem(main_rect)
                else:
                    relative_rect1 = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -thickness/2, 20,  thickness))
                    relative_rect1.setBrush(QtGui.QColor("black"))
                    relative_rect2 = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -thickness/2, 20,  thickness)) 
                    relative_rect2.setBrush(QtGui.QColor("black"))
                    if name[1]["arrow"]=="end":
                        transform.translate(length_x, length_y)                        
                        relative_rect1.setRotation(name[1]['angle']-150)
                        relative_rect1.setTransform(transform)
                        
                        angle = name[1]['angle']+150 if name[1]['angle'] < 210 else name[1]['angle']-210
                        relative_rect2.setRotation(angle)
                        relative_rect2.setTransform(transform)
                    else:
                        relative_rect1.setRotation(name[1]['angle']-30)
                        relative_rect1.setTransform(transform)

                        angle = name[1]['angle']+30 if name[1]['angle'] < 330 else name[1]['angle']-330
                        relative_rect2.setRotation(angle)
                        relative_rect2.setTransform(transform)
                    group = VectorGroup(main_rect, relative_rect1, relative_rect2)
                    self.scene.addItem(group)
            elif "ellipse" in name[0]:
                name[1].update({'width':str(eval(name[1]['width'])*scale)})
                name[1].update({'height':str(eval(name[1]['height'])*scale)})
                transform = QtGui.QTransform()
                x = eval(name[1]['x'])
                y = eval(name[1]['y'])
                transform.translate(x, y)

                t = ""
                for text_name in texts:
                    if name[0] == text_name:
                        if t == "":
                            t = t + f"{texts[name[0]]}"
                        else:
                            t = t + f", {texts[name[0]]}"
                if t!="":
                    font = QtGui.QFont()
                    font.setPointSize(12)                
                    textitem = self.scene.addText(t, font)
                    textitem.setPos(transform.dx()+float(name[1]['width'])/2-len(t)*5, transform.dy()+len(t)*6)
                    textitem.setZValue(textitem.zValue() + 1)

                ellipse = self.scene.addEllipse(QtCore.QRectF(0, 0, float(name[1]["width"]),  float(name[1]["height"])), brush=QtGui.QColor("white"))
                ellipse.setTransform(transform)
                pen = QtGui.QPen(QtCore.Qt.GlobalColor.black)
                pen.setWidth(thickness)
                ellipse.setPen(pen)
            elif "rect" in name[0]:
                name[1].update({'width':str(eval(name[1]['width'])*scale)})
                name[1].update({'height':str(eval(name[1]['height'])*scale)})
                transform = QtGui.QTransform()
                x = eval(name[1]['x'])
                y = eval(name[1]['y'])
                transform.translate(x, y)

                t = ""
                for text_name in texts:
                    if name[0] == text_name:
                        if t == "":
                            t = t + f"{texts[name[0]]}"
                        else:
                            t = t + f", {texts[name[0]]}"
                if t!="":
                    font = QtGui.QFont()
                    font.setPointSize(10)                
                    textitem = self.scene.addText(t, font)
                    textitem.setPos(transform.dx()+float(name[1]['width'])/2-len(t)*5, transform.dy()+float(name[1]['height'])/2-10)
                    textitem.setZValue(textitem.zValue() + 1)

                rect = self.scene.addRect(QtCore.QRectF(0, 0, float(name[1]["width"]),  float(name[1]["height"])), brush=QtGui.QColor("white"))
                rect.setTransform(transform)
                pen = QtGui.QPen(QtCore.Qt.GlobalColor.black)
                pen.setWidth(thickness)
                rect.setPen(pen)
            try:
                start = eval(name[2]['start'])
                stop = eval(name[2]['stop'])
                ind = name[2]['type']
            except:
                pass
            else:
                match ind:
                    case 0:
                        if name[1]["arrow"]=="none":
                            animation = QtCore.QVariantAnimation()
                            animation.setStartValue(start)
                            animation.setEndValue(stop)
                            animation.setDuration(1500)
                            animation.valueChanged.connect(lambda value, rect=main_rect: self.updateLength(rect, value, 2))
                            animation_list.append(animation)
                        else:
                            animation = QtCore.QVariantAnimation()
                            animation.setStartValue(start)
                            animation.setEndValue(stop)
                            animation.setDuration(1500)
                            inp = (stop-start)*2
                            animation.valueChanged.connect(lambda value, transform=inp: group.updateLength(transform, value))
                            animation_list.append(animation)
                    case 1:
                        if "ellipse" in name[0]:
                            animation = QtCore.QVariantAnimation()
                            animation.setStartValue(start)
                            animation.setEndValue(stop)
                            animation.setDuration(1500)
                            animation.valueChanged.connect(lambda value, ellipse=ellipse: self.updatePosition(ellipse, value))
                            animation_list.append(animation)
                        elif "rect" in name[0]:
                            animation = QtCore.QVariantAnimation()
                            animation.setStartValue(start)
                            animation.setEndValue(stop)
                            animation.setDuration(1500)
                            animation.valueChanged.connect(lambda value, rect=rect: self.updatePosition(rect, value))
                            animation_list.append(animation)
                        elif "line" in name[0]:
                            animation = QtCore.QVariantAnimation()
                            animation.setStartValue(start)
                            animation.setEndValue(stop)
                            animation.setDuration(1500)
                            animation.valueChanged.connect(lambda value, main_rect=main_rect: self.updatePosition(main_rect, value))
                            animation_list.append(animation)   
        print(animation_list)        
        return animation_list

    def updateLength(self, rect_item, value, height):
        rect_item.setRect(QtCore.QRectF(rect_item.rect().x(), rect_item.rect().y(), value, height))

    def updatePosition(self, rect_item, value):
        transform = QtGui.QTransform()
        transform.translate(rect_item.transform().dx(), value)
        rect_item.setTransform(transform)

    def animation(self):
        try:
            for item in self.scene.items():
                if isinstance(item, QtWidgets.QGraphicsTextItem):
                    self.scene.removeItem(item)
            for animation in self.animation_list:
                animation.start()
                print("Animation started")
        except Exception as e:
            print(f"Error starting animations: {e}")
        self.repeat_animation_btn.setHidden(True)

    def task(self, task_page):        
        if self.data == {}:
            return
        
        self.menu_horizontal_layout.setContentsMargins(self.static["menu"]["layout"]["left"], self.static["menu"]["layout"]["top"], self.static["menu"]["layout"]["right"], self.static["menu"]["layout"]["bottom"])
        self.menu_horizontal_layout.setSpacing(self.static["menu"]["layout"]["spacing"])
        
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["title"])
        self.menu_label.setFont(font)

        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["size-menu"])
        self.font_size_combo_box.setFont(font)

        self.back_to_topics_cmd_link_btn.setMinimumSize(QtCore.QSize(self.static["menu"]["backtrack-width"], 45))
        self.back_to_topics_cmd_link_btn.setMaximumSize(QtCore.QSize(self.static["menu"]["backtrack-width-big"], 45))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(self.static["font-sizes"]["text"])

        self.title_horizontal_layout.setContentsMargins(self.static["subtitle-margin-left"], 0, self.static["subtitle-margin-left"], 0)
        self.title_horizontal_layout.setSpacing(self.static["subtitle-spacing"])
        self.task_label.setMinimumSize(QtCore.QSize(140, 30))

        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["subtitle"])
        self.task_label.setFont(font)

        self.repeat_animation_btn.setMinimumSize(QtCore.QSize(self.static["topic"]["height"], self.static["topic"]["height"]))
        self.repeat_animation_btn.setMaximumSize(QtCore.QSize(self.static["topic"]["height"], self.static["topic"]["height"]))

        self.task_page_vertical_layout.removeWidget(self.task_group_box)


        self.task_group_box = QtWidgets.QGroupBox(parent=task_page)
        self.task_group_box.setStyleSheet("border:none;")
        self.task_group_box.setTitle("")
        self.task_group_box.setObjectName("task_group_box")

        self.task_vertical_layout = QtWidgets.QVBoxLayout(self.task_group_box)
        self.task_vertical_layout.setContentsMargins(0, 0, 0, 0)
        self.task_vertical_layout.setSpacing(self.static["layout-spacing"])
        self.task_vertical_layout.setObjectName("task_vertical_layout")



        width = task_page.geometry().width()-40
        
        match task_page.window_size_index:
            case 0:
                height, width = 200,200
            case 1:
                height, width=375,660
            case 2:
                height, width=450,800

        self.animation_list = []

        self.scene = QtWidgets.QGraphicsScene()
        self.scene.setBackgroundBrush(QtGui.QBrush(QtGui.QColor(131, 203, 235)))
        self.scene.setSceneRect(0, 0, width, height)
        self.animation_list = self.rect(task_page, width, height, 2)
        view = QtWidgets.QGraphicsView(self.scene)#, parent=self.scene_group_box)
        view.setMinimumSize(width, height)

        #self.view.setRenderHint(QtGui.QPainter.RenderHint.Antialiasing)
        self.task_vertical_layout.addWidget(view, alignment=QtCore.Qt.AlignmentFlag.AlignHCenter)

        self.question_label = QtWidgets.QLabel(self.data[task_page.index]["question"], parent=self.task_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.question_label.setFont(font)
        self.question_label.setWordWrap(True)
        self.question_label.setObjectName("question_label")
        self.question_label.setMinimumSize(QtCore.QSize(self.static["topic"]["desc-width"]*2, int(self.static["topic"]["height"]*1.5)))
        #self.question_horizontal_layout.addWidget(self.question_label)
        self.task_vertical_layout.addWidget(self.question_label, alignment=QtCore.Qt.AlignmentFlag.AlignHCenter)

        self.answer_group_box = QtWidgets.QGroupBox(parent=self.task_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.answer_group_box.sizePolicy().hasHeightForWidth())
        self.answer_group_box.setSizePolicy(sizePolicy)
        self.answer_group_box.setStyleSheet("border: none")
        self.answer_group_box.setTitle("")
        self.answer_group_box.setObjectName("answer_group_box")

        self.answer_horizontal_layout = QtWidgets.QHBoxLayout(self.answer_group_box)
        self.answer_horizontal_layout.setContentsMargins(0, 0, 0, 40)
        self.answer_horizontal_layout.setSpacing(10)
        self.answer_horizontal_layout.setObjectName("answer_horizontal_layout")

        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.answer_horizontal_layout.addItem(spacerItem3)

        self.answer_label = QtWidgets.QLabel(parent=self.answer_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.answer_label.sizePolicy().hasHeightForWidth())
        self.answer_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.answer_label.setFont(font)
        self.answer_label.setObjectName("answer_label")
        self.answer_horizontal_layout.addWidget(self.answer_label)

        self.answer_line_edit = QtWidgets.QLineEdit(parent=self.answer_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.answer_line_edit.sizePolicy().hasHeightForWidth())
        self.answer_line_edit.setSizePolicy(sizePolicy)
        self.answer_line_edit.setMinimumSize(QtCore.QSize(150, 45))
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.answer_line_edit.setFont(font)
        self.answer_line_edit.setValidator(TASK_ANSWER_VALIDATOR)
        self.answer_line_edit.setStyleSheet("border: 2px solid black;")
        self.answer_line_edit.setObjectName("answer_line_edit")
        self.answer_line_edit.textChanged.connect(task_page.send_enable)
        self.answer_horizontal_layout.addWidget(self.answer_line_edit)

        self.answer_unit_label = QtWidgets.QLabel(self.data[task_page.index]["unit"], parent=self.answer_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.answer_unit_label.sizePolicy().hasHeightForWidth())
        self.answer_unit_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.answer_unit_label.setFont(font)
        self.answer_unit_label.setObjectName("answer_unit_label")
        self.answer_horizontal_layout.addWidget(self.answer_unit_label)

        self.answer_btn = QtWidgets.QPushButton("Küldés", parent=self.answer_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.answer_btn.sizePolicy().hasHeightForWidth())
        self.answer_btn.setSizePolicy(sizePolicy)
        self.answer_btn.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.answer_btn.setFont(font)
        self.answer_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.answer_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:20px;padding-right:20px;}\n"
                                        "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:20px;padding-right:20px;}")
        self.answer_btn.setObjectName("answer_btn")        
        self.answer_horizontal_layout.addWidget(self.answer_btn)
        self.answer_btn.clicked.connect(task_page.send)
        self.answer_btn.setEnabled(False)

        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.answer_horizontal_layout.addItem(spacerItem4)
        self.task_vertical_layout.addWidget(self.answer_group_box)
        self.task_page_vertical_layout.addWidget(self.task_group_box)

        QtCore.QMetaObject.connectSlotsByName(task_page)

    def setupUi(self, task_page):
        task_page.setObjectName("task_page")
        task_page.resize(720, 480)
        task_page.setMinimumSize(QtCore.QSize(720, 480))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(217, 242, 208))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(131, 203, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(217, 242, 208))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(131, 203, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(217, 242, 208))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(131, 203, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(131, 203, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        task_page.setPalette(palette)

        self.task_page_vertical_layout = QtWidgets.QVBoxLayout(task_page)
        self.task_page_vertical_layout.setContentsMargins(0, 0, 0, 0)
        self.task_page_vertical_layout.setSpacing(10)
        self.task_page_vertical_layout.setObjectName("task_page_vertical_layout")

        self.menu_group_box = QtWidgets.QGroupBox(parent=task_page)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menu_group_box.sizePolicy().hasHeightForWidth())
        self.menu_group_box.setSizePolicy(sizePolicy)
        self.menu_group_box.setMinimumSize(QtCore.QSize(0, 50))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        self.menu_group_box.setPalette(palette)
        self.menu_group_box.setAutoFillBackground(True)
        self.menu_group_box.setStyleSheet("")
        self.menu_group_box.setTitle("")
        self.menu_group_box.setObjectName("menu_group_box")

        self.menu_horizontal_layout = QtWidgets.QHBoxLayout(self.menu_group_box)
        self.menu_horizontal_layout.setContentsMargins(self.static["menu"]["layout"]["left"], self.static["menu"]["layout"]["top"], self.static["menu"]["layout"]["right"], self.static["menu"]["layout"]["bottom"])
        self.menu_horizontal_layout.setSpacing(self.static["menu"]["layout"]["spacing"])
        self.menu_horizontal_layout.setObjectName("menu_horizontal_layout")
        self.menu_label = QtWidgets.QLabel(task_page.topic_name, parent=self.menu_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["title"])
        self.menu_label.setFont(font)
        self.menu_label.setObjectName("menu_label")
        self.menu_horizontal_layout.addWidget(self.menu_label)

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.menu_horizontal_layout.addItem(spacerItem)

        self.font_size_combo_box = QtWidgets.QComboBox(parent=self.menu_group_box)
        self.font_size_combo_box.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["size-menu"])
        self.font_size_combo_box.setFont(font)
        self.font_size_combo_box.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.font_size_combo_box.setStyleSheet("")
        self.font_size_combo_box.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToContents)
        self.font_size_combo_box.setObjectName("font_size_combo_box")
        self.font_size_combo_box.addItem("")
        self.font_size_combo_box.addItem("")
        self.font_size_combo_box.addItem("")
        self.menu_horizontal_layout.addWidget(self.font_size_combo_box)
        self.font_size_combo_box.setHidden(True)

        self.back_to_topics_cmd_link_btn = QtWidgets.QCommandLinkButton(parent=self.menu_group_box)
        self.back_to_topics_cmd_link_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.back_to_topics_cmd_link_btn.setMinimumSize(QtCore.QSize(self.static["menu"]["backtrack-width"], 45))
        self.back_to_topics_cmd_link_btn.setMaximumSize(QtCore.QSize(self.static["menu"]["backtrack-width-big"], 45))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(self.static["font-sizes"]["text"])
        self.back_to_topics_cmd_link_btn.setFont(font)
        self.back_to_topics_cmd_link_btn.setObjectName("back_to_topics_cmd_link_btn")
        icon = QtGui.QIcon('utils/images/left-arrow.png')           
        self.back_to_topics_cmd_link_btn.setIcon(icon)
        self.menu_horizontal_layout.addWidget(self.back_to_topics_cmd_link_btn)
        self.task_page_vertical_layout.addWidget(self.menu_group_box)

        self.title_group_box = QtWidgets.QGroupBox(parent=task_page)
        self.title_group_box.setStyleSheet("border:none;")
        self.title_group_box.setTitle("")
        self.title_group_box.setObjectName("title_group_box")
        self.title_horizontal_layout = QtWidgets.QHBoxLayout(self.title_group_box)
        self.title_horizontal_layout.setContentsMargins(self.static["subtitle-margin-left"], 0, self.static["subtitle-margin-left"], 0)
        self.title_horizontal_layout.setSpacing(self.static["subtitle-spacing"])
        self.title_horizontal_layout.setObjectName("title_horizontal_layout")
        self.task_label = QtWidgets.QLabel(parent=self.title_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.task_label.sizePolicy().hasHeightForWidth())
        self.task_label.setSizePolicy(sizePolicy)
        self.task_label.setMinimumSize(QtCore.QSize(140, 30))
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["subtitle"])
        self.task_label.setFont(font)
        self.task_label.setStyleSheet("")
        self.task_label.setObjectName("task_label")
        self.title_horizontal_layout.addWidget(self.task_label)

        self.repeat_animation_btn = QtWidgets.QPushButton(parent=self.title_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.repeat_animation_btn.sizePolicy().hasHeightForWidth())
        self.repeat_animation_btn.setSizePolicy(sizePolicy)
        self.repeat_animation_btn.setMinimumSize(QtCore.QSize(self.static["topic"]["height"], self.static["topic"]["height"]))
        self.repeat_animation_btn.setMaximumSize(QtCore.QSize(self.static["topic"]["height"], self.static["topic"]["height"]))
        self.repeat_animation_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.repeat_animation_btn.setText("")
        self.repeat_animation_btn.setObjectName("repeat_animation_btn")
        self.repeat_animation_btn.setStyleSheet("QPushButton {border-image: url(utils/images/replay.png);}")
        self.repeat_animation_btn.setIconSize(QtCore.QSize(self.static["topic"]["height"], self.static["topic"]["height"]))
        self.repeat_animation_btn.clicked.connect(self.animation)
        self.repeat_animation_btn.setHidden(True)
        
        self.title_horizontal_layout.addWidget(self.repeat_animation_btn)
        self.task_page_vertical_layout.addWidget(self.title_group_box)

        self.task_group_box = QtWidgets.QGroupBox(parent=task_page)
        self.task_group_box.setStyleSheet("border:none;")
        self.task_group_box.setTitle("")
        self.task_group_box.setObjectName("task_group_box")
        self.task_vertical_layout = QtWidgets.QVBoxLayout(self.task_group_box)
        self.task_vertical_layout.setContentsMargins(0, 0, 0, 0)
        self.task_vertical_layout.setSpacing(10)
        self.task_vertical_layout.setObjectName("task_vertical_layout")
        
        self.task_page_vertical_layout.addWidget(self.task_group_box)
        self.retranslateUi(task_page)


        match task_page.user_settings['font-size']:
            case 'small':
                self.font_size_combo_box.setCurrentIndex(0)
            case 'medium':
                self.font_size_combo_box.setCurrentIndex(1)
            case 'big':
                self.font_size_combo_box.setCurrentIndex(2)

        QtCore.QMetaObject.connectSlotsByName(task_page)

    def retranslateUi(self, task_page):
        _translate = QtCore.QCoreApplication.translate
        task_page.setWindowTitle(_translate("task_page", "SmartStudy"))
        self.font_size_combo_box.setItemText(0, _translate("task_page", "Kis betűméret"))
        self.font_size_combo_box.setItemText(1, _translate("task_page", "Közepes betűméret"))
        self.font_size_combo_box.setItemText(2, _translate("task_page", "Nagy betűméret"))
        self.back_to_topics_cmd_link_btn.setText(_translate("task_page", "Vissza a szintekhez"))
        self.task_label.setText(_translate("task_page", "Gyakorló feladat"))
