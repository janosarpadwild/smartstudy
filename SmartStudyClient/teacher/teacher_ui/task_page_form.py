# Form implementation generated from reading ui file 'task_page.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from math import sin, cos, radians
import math

from utils.validators import TASK_ANSWER_VALIDATOR

class VectorGroup(QtWidgets.QGraphicsItemGroup):
    def __init__(self, movable_rect, relative_rect1, relative_rect2):
        super().__init__()

        self.movable_rect = movable_rect
        self.relative_rect1 = relative_rect1
        self.relative_rect2 = relative_rect2

        # Add rectangles to the group
        self.addToGroup(movable_rect)
        self.addToGroup(relative_rect1)
        self.addToGroup(relative_rect2)

        # Make sure the group itself is not movable or selectable
        self.setFlag(QtWidgets.QGraphicsItemGroup.GraphicsItemFlag.ItemIsMovable, True)
        self.setFlag(QtWidgets.QGraphicsItemGroup.GraphicsItemFlag.ItemIsSelectable, True)

    def set_main_rect_width(self, value):
        rect = self.movable_rect.rect()
        rect.setWidth(value)
        self.movable_rect.setRect(rect)
        self.relative_rect1.setPos(0,value)
        self.relative_rect2.setPos(0,value)
        #main_rect = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -4/2, 50,  4))
        #main_rect.setPos(0,value)

class Ui_task_page(object):
    def __init__(self, static):
        super().__init__()
        self.static = static
        self.data = {}

    def screen_size(self, task_page):
        screen_geometry = QtWidgets.QApplication.primaryScreen().availableGeometry()
        width = screen_geometry.width()
        height = screen_geometry.height()
        if width >= self.static["window-size"]["width"] and height >= self.static["window-size"]["height"]:
            task_page.setMinimumSize(QtCore.QSize(self.static["window-size"]["width"], self.static["window-size"]["height"]))
            qr=task_page.frameGeometry()           
            cp=QtGui.QGuiApplication.primaryScreen().availableGeometry().center()
            qr.moveCenter(cp)
            task_page.move(qr.topLeft())
        else:
            task_page.setMinimumSize(QtCore.QSize(width, height))
            qr=task_page.frameGeometry()           
            cp=QtGui.QGuiApplication.primaryScreen().availableGeometry().center()
            qr.moveCenter(cp)
            task_page.move(qr.topLeft())


    def rect(self, width, height, thickness):
        self.scene.clear()  # Clear the existing items in the scene

        objects = self.data['parameters']['objects']
        if not objects:
            return

        texts = self.data['parameters']['texts']
        maximum_size_x = 0
        maximum_size_y = 0

        for name in objects:
            name[1]['x'] = name[1]['x'].replace('size_x', str(width))
            name[1]['y'] = name[1]['y'].replace('size_y', str(height))

        for name in objects:
            if 'line' in name[0]:
                name[1]['length'] = name[1]['length'].replace('size_y', str(height))
                name[1]['length'] = name[1]['length'].replace('size_x', str(width))
            if '#' not in name[0]:
                if 'line' in name[0]:
                    length = eval(name[1]['length'], objects)
                    length_x = abs(eval(name[1]['x']) + length * math.cos(math.radians(name[1]['angle'])))
                    length_y = abs(eval(name[1]['y']) + length * math.sin(math.radians(name[1]['angle'])))
                    maximum_size_x = max(maximum_size_x, length_x)
                    maximum_size_y = max(maximum_size_y, length_y)
                if 'rect' in name[0] or 'ellipse' in name[0]:
                    length_x = abs(eval(name[1]['x']) + eval(name[1]['width']))
                    length_y = abs(eval(name[1]['y']) + eval(name[1]['height']))
                    maximum_size_x = max(maximum_size_x, length_x)
                    maximum_size_y = max(maximum_size_y, length_y)

        scale = min(width / maximum_size_x, height / maximum_size_y)

        for name in objects:
            if "line" in name[0]:
                self.draw_line(name, scale, texts, thickness, objects)
            elif "ellipse" in name[0]:
                self.draw_ellipse(name, scale, texts, thickness, objects)
            elif "rect" in name[0]:
                self.draw_rect(name, scale, texts, thickness, objects)

    def draw_line(self, name, scale, texts, thickness, objects):
        transform = QtGui.QTransform()
        x = eval(name[1]['x'])
        y = eval(name[1]['y'])
        length = eval(name[1]['length'])
        transform.translate(x, y)  # Positioning

        t = ""
        for text_name in texts:
            if name[0] == text_name:
                t = f"{texts[name[0]]}" if t == "" else f"{t}, {texts[name[0]]}"

        if t:
            font = QtGui.QFont()
            font.setPointSize(12)
            textitem = self.scene.addText(t, font)
            textitem.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.TextEditorInteraction)
            textitem.setFlag(QtWidgets.QGraphicsTextItem.GraphicsItemFlag.ItemIsMovable)
            textitem.setFlag(QtWidgets.QGraphicsTextItem.GraphicsItemFlag.ItemIsSelectable)
            length_x = length * math.cos(math.radians(name[1]['angle'])) / 2 * scale
            length_y = length * math.sin(math.radians(name[1]['angle'])) / 2 * scale

            angle = name[1]['angle'] if name[1]['angle'] >= 0 else 360 - name[1]['angle']
            if angle <= 90:
                length_x += 10 * (angle / 90)
                length_y -= 30 * (1 - angle / 90)
            elif angle <= 180:
                length_x -= 110 * (1 - angle / 90 / 2) + len(t) * 4.5
                length_y -= 40 * (angle / 90 / 2)
            elif angle <= 270:
                length_y -= 50 * (1 - angle / 90 / 4)
            textitem.setPos(transform.dx() + length_x, transform.dy() + length_y)

        length_x = length * math.cos(math.radians(name[1]['angle'])) * scale
        length_y = length * math.sin(math.radians(name[1]['angle'])) * scale
        name[1]['length'] = str(length * scale)

        main_rect = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -thickness / 2, float(name[1]['length']), thickness))
        main_rect.setBrush(QtGui.QColor("black"))
        main_rect.setRotation(name[1]['angle'])
        main_rect.setTransform(transform)
        main_rect.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        main_rect.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)

        if name[1]["arrow"] == "none":
            self.scene.addItem(main_rect)
        else:
            self.draw_arrow(name, main_rect, length_x, length_y, transform, thickness, objects)

    def draw_arrow(self, name, main_rect, length_x, length_y, transform, thickness, objects):
        relative_rect1 = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -thickness / 2, 20, thickness))
        relative_rect1.setBrush(QtGui.QColor("black"))
        relative_rect2 = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -thickness / 2, 20, thickness))
        relative_rect2.setBrush(QtGui.QColor("black"))

        if name[1]["arrow"] == "end":
            transform.translate(length_x, length_y)
            relative_rect1.setRotation(name[1]['angle'] - 150)
            relative_rect1.setTransform(transform)

            angle = name[1]['angle'] + 150 if name[1]['angle'] < 210 else name[1]['angle'] - 210
            relative_rect2.setRotation(angle)
            relative_rect2.setTransform(transform)
        else:
            relative_rect1.setRotation(name[1]['angle'] - 30)
            relative_rect1.setTransform(transform)

            angle = name[1]['angle'] + 30 if name[1]['angle'] < 330 else name[1]['angle'] - 330
            relative_rect2.setRotation(angle)
            relative_rect2.setTransform(transform)
        group = VectorGroup(main_rect, relative_rect1, relative_rect2)
        self.scene.addItem(group)

    def draw_ellipse(self, name, scale, texts, thickness, objects):
        name[1]['width'] = str(eval(name[1]['width']) * scale)
        name[1]['height'] = str(eval(name[1]['height']) * scale)
        transform = QtGui.QTransform()
        x = eval(name[1]['x'])
        y = eval(name[1]['y'])
        transform.translate(x, y)

        t = ""
        for text_name in texts:
            if name[0] == text_name:
                t = f"{texts[name[0]]}" if t == "" else f"{t}, {texts[name[0]]}"

        if t:
            font = QtGui.QFont()
            font.setPointSize(12)
            textitem = self.scene.addText(t, font)
            textitem.setPos(transform.dx() + float(name[1]['width']) / 2 - len(t) * 5, transform.dy() + len(t) * 6)
            textitem.setZValue(textitem.zValue() + 1)
            textitem.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.TextEditorInteraction)
            textitem.setFlag(QtWidgets.QGraphicsTextItem.GraphicsItemFlag.ItemIsMovable)
            textitem.setFlag(QtWidgets.QGraphicsTextItem.GraphicsItemFlag.ItemIsSelectable)

        ellipse = self.scene.addEllipse(QtCore.QRectF(0, 0, float(name[1]["width"]), float(name[1]["height"])), brush=QtGui.QColor("white"))
        ellipse.setTransform(transform)
        pen = QtGui.QPen(QtCore.Qt.GlobalColor.black)
        pen.setWidth(thickness)
        ellipse.setPen(pen)
        ellipse.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        ellipse.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)

    def draw_rect(self, name, scale, texts, thickness, objects):
        name[1]['width'] = str(eval(name[1]['width']) * scale)
        name[1]['height'] = str(eval(name[1]['height']) * scale)
        transform = QtGui.QTransform()
        x = eval(name[1]['x'])
        y = eval(name[1]['y'])
        transform.translate(x, y)

        t = ""
        for text_name in texts:
            if name[0] == text_name:
                t = f"{texts[name[0]]}" if t == "" else f"{t}, {texts[name[0]]}"

        if t:
            font = QtGui.QFont()
            font.setPointSize(10)
            textitem = self.scene.addText(t, font)
            textitem.setPos(transform.dx() + float(name[1]['width']) / 2 - len(t) * 5, transform.dy() + float(name[1]['height']) / 2 - 10)
            textitem.setZValue(textitem.zValue() + 1)
            textitem.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.TextEditorInteraction)
            textitem.setFlag(QtWidgets.QGraphicsTextItem.GraphicsItemFlag.ItemIsMovable)
            textitem.setFlag(QtWidgets.QGraphicsTextItem.GraphicsItemFlag.ItemIsSelectable)

        rect = self.scene.addRect(QtCore.QRectF(0, 0, float(name[1]["width"]), float(name[1]["height"])), brush=QtGui.QColor("white"))
        rect.setTransform(transform)
        pen = QtGui.QPen(QtCore.Qt.GlobalColor.black)
        pen.setWidth(thickness)
        rect.setPen(pen)
        rect.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        rect.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)

    def add_rectangle(self):
        transform = QtGui.QTransform()
        transform.translate(50, 50)
        rect = QtWidgets.QGraphicsRectItem(0, 0, 200, 50)
        rect.setTransform(transform)
        brush = QtGui.QBrush(QtCore.Qt.GlobalColor.white)
        rect.setBrush(brush)
        pen = QtGui.QPen(QtCore.Qt.GlobalColor.black)
        pen.setWidth(4)
        rect.setPen(pen)
        rect.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        rect.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)
        self.scene.addItem(rect)

    def set_width(self):
        if self.width_line_edit.text()=="":
            return
        items = self.scene.selectedItems()
        for item in items:
            if isinstance(item, VectorGroup):
                pass
                #item.set_main_rect_width(float(self.width_line_edit.text()))
            else:
                obj = item.rect()
                obj.setWidth(float(self.width_line_edit.text()))
                item.setRect(obj)

    def add_ellipse(self):
        transform = QtGui.QTransform()
        transform.translate(50, 50)
        ellipse = QtWidgets.QGraphicsEllipseItem(0, 0, 50, 50)
        ellipse.setTransform(transform)
        brush = QtGui.QBrush(QtCore.Qt.GlobalColor.white)
        ellipse.setBrush(brush)
        pen = QtGui.QPen(QtCore.Qt.GlobalColor.black)
        pen.setWidth(4)
        ellipse.setPen(pen)
        ellipse.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        ellipse.setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)
        self.scene.addItem(ellipse)

    def set_height(self):
        if self.height_line_edit.text()=="":
            return
        items = self.scene.selectedItems()
        for item in items:
            if isinstance(item, VectorGroup):
                pass
                #item.set_main_rect_height(float(self.height_line_edit.text()))
            else:
                obj = item.rect()
                obj.setHeight(float(self.height_line_edit.text()))
                item.setRect(obj)

    def add_vector(self):
        transform = QtGui.QTransform()
        transform.translate(50, 50)
        main_rect = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -4/2, 50,  4))
        main_rect.setBrush(QtGui.QColor("black"))
        main_rect.setTransform(transform)
        relative_rect1 = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -4/2, 20,  4))
        relative_rect1.setBrush(QtGui.QColor("black"))           
        relative_rect1.setRotation(-30)
        relative_rect1.setTransform(transform)
        relative_rect2 = QtWidgets.QGraphicsRectItem(QtCore.QRectF(0, -4/2, 20,  4))
        relative_rect2.setBrush(QtGui.QColor("black"))
        relative_rect2.setRotation(30)
        relative_rect2.setTransform(transform)
        group = VectorGroup(main_rect, relative_rect1, relative_rect2)
        self.scene.addItem(group)

    def set_rotation(self):
        if self.rotation_line_edit.text()=="":
            return
        items = self.scene.selectedItems()
        for item in items:
            item.setRotation(float(self.rotation_line_edit.text()))

    def add_text(self):
        font = QtGui.QFont()
        font.setPointSize(12)                
        textitem = self.scene.addText("Szöveg", font)
        textitem.setPos(50, 50)
        textitem.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.TextEditorInteraction)
        textitem.setFlag(QtWidgets.QGraphicsTextItem.GraphicsItemFlag.ItemIsMovable)
        textitem.setFlag(QtWidgets.QGraphicsTextItem.GraphicsItemFlag.ItemIsSelectable)

    def remove_object(self):
        items = self.scene.selectedItems()
        for item in items:
            self.scene.removeItem(item)

    def object_up(self):
        items = self.scene.selectedItems()
        for item in items:
            z = item.zValue()
            item.setZValue(z + 1)

    def object_down(self):
        items = self.scene.selectedItems()
        for item in items:
            z = item.zValue()
            item.setZValue(z - 1)

    def task(self, task_page):        
        if self.data == {}:
            return       

        _translate = QtCore.QCoreApplication.translate

        self.menu_horizontal_layout.setContentsMargins(self.static["menu"]["layout"]["left"], self.static["menu"]["layout"]["top"], self.static["menu"]["layout"]["right"], self.static["menu"]["layout"]["bottom"])
        self.menu_horizontal_layout.setSpacing(self.static["menu"]["layout"]["spacing"])
        
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["title"])
        self.menu_label.setFont(font)
        self.menu_label.setText(_translate("task_page", task_page.topic_name))

        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["size-menu"])
        self.font_size_combo_box.setFont(font)

        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(self.static["font-sizes"]["text"])

        self.back_to_topics_cmd_link_btn.setMinimumSize(QtCore.QSize(self.static["menu"]["backtrack-width"], 45))
        self.back_to_topics_cmd_link_btn.setMaximumSize(QtCore.QSize(self.static["menu"]["backtrack-width-big"], 45))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(self.static["font-sizes"]["text"])
        self.back_to_topics_cmd_link_btn.setFont(font)

        self.title_horizontal_layout.setContentsMargins(self.static["subtitle-margin-left"], 0, self.static["subtitle-margin-left"], 0)
        self.title_horizontal_layout.setSpacing(self.static["subtitle-spacing"])
        self.task_label.setMinimumSize(QtCore.QSize(140, 30))

        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["subtitle"])
        self.task_label.setFont(font)

        self.task_page_vertical_layout.removeWidget(self.task_group_box)

        self.task_group_box = QtWidgets.QGroupBox(parent=task_page)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.MinimumExpanding)
        self.task_group_box.setSizePolicy(sizePolicy)
        self.task_group_box.setStyleSheet("border:none;")
        self.task_group_box.setTitle("")
        self.task_group_box.setObjectName("task_group_box")

        self.task_vertical_layout = QtWidgets.QVBoxLayout(self.task_group_box)
        self.task_vertical_layout.setContentsMargins(30, 0, 30, 0)
        self.task_vertical_layout.setSpacing(self.static["layout-spacing"])
        self.task_vertical_layout.setObjectName("task_vertical_layout")
        self.task_vertical_layout.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)

        self.scene_group_box = QtWidgets.QGroupBox(parent=self.task_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Maximum)
        self.scene_group_box.setSizePolicy(sizePolicy)
        self.scene_group_box.setStyleSheet("border:none;")
        self.scene_group_box.setTitle("")
        self.scene_group_box.setObjectName("scene_group_box")

        self.scene_horizontal_layout = QtWidgets.QGridLayout(self.scene_group_box)        
        self.scene_horizontal_layout.setContentsMargins(0, 0, 0, 0)
        self.scene_horizontal_layout.setSpacing(self.static["layout-spacing"])
        self.scene_horizontal_layout.setObjectName("scene_horizontal_layout")
        self.scene_horizontal_layout.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)

        self.scene_control_group_box = QtWidgets.QGroupBox(parent=self.scene_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Maximum)
        self.scene_control_group_box.setSizePolicy(sizePolicy)
        self.scene_control_group_box.setStyleSheet("border:none;")
        self.scene_control_group_box.setTitle("")
        self.scene_control_group_box.setObjectName("scene_control_group_box")

        self.scene_control_vertical_layout = QtWidgets.QGridLayout(self.scene_control_group_box)
        self.scene_control_vertical_layout.setContentsMargins(0, 0, 0, 0)
        self.scene_control_vertical_layout.setSpacing(self.static["layout-spacing"])
        self.scene_control_vertical_layout.setObjectName("scene_control_vertical_layout")
        self.scene_control_vertical_layout.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)

        self.add_remove_label = QtWidgets.QLabel("Hozzáad", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.add_remove_label.setFont(font)
        self.add_remove_label.setObjectName("add_remove_label")
        self.scene_control_vertical_layout.addWidget(self.add_remove_label, 0, 0, 1, 1, QtCore.Qt.AlignmentFlag.AlignHCenter)

        self.set_label = QtWidgets.QLabel("Beállítások", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.set_label.setFont(font)
        self.set_label.setObjectName("set_label")
        self.scene_control_vertical_layout.addWidget(self.set_label, 0, 1, 1, 2, QtCore.Qt.AlignmentFlag.AlignHCenter)

        self.add_rectangel_btn = QtWidgets.QPushButton("Új tömeg", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.add_rectangel_btn.setFont(font)
        self.add_rectangel_btn.setObjectName("add_rectangel_btn")
        self.add_rectangel_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.add_rectangel_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}\n"
                                    "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}")
        self.add_rectangel_btn.clicked.connect(self.add_rectangle)
        self.scene_control_vertical_layout.addWidget(self.add_rectangel_btn, 1, 0, 1, 1)

        self.width_line_edit = QtWidgets.QLineEdit(parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.width_line_edit.setMaximumWidth(80)
        self.width_line_edit.setFont(font)
        self.width_line_edit.setObjectName("width_line_edit")
        self.width_line_edit.setValidator(TASK_ANSWER_VALIDATOR)
        self.width_line_edit.setPlaceholderText("cm")
        self.width_line_edit.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
        self.width_line_edit.textChanged.connect(self.set_width)
        self.scene_control_vertical_layout.addWidget(self.width_line_edit, 1, 1, 1, 1)

        self.width_label = QtWidgets.QLabel("Szélesség(cm)", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.width_label.setFont(font)
        self.width_label.setObjectName("width_label")
        self.scene_control_vertical_layout.addWidget(self.width_label, 1, 2, 1, 1)

        self.add_ellipse_btn = QtWidgets.QPushButton("Új csiga", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.add_ellipse_btn.setFont(font)
        self.add_ellipse_btn.setObjectName("add_ellipse_btn")
        self.add_ellipse_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}\n"
                                    "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}")
        self.add_ellipse_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.add_ellipse_btn.clicked.connect(self.add_ellipse)
        self.scene_control_vertical_layout.addWidget(self.add_ellipse_btn, 2, 0, 1, 1)

        self.height_line_edit = QtWidgets.QLineEdit(parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.height_line_edit.setMaximumWidth(80)
        self.height_line_edit.setFont(font)
        self.height_line_edit.setObjectName("height_line_edit")
        self.height_line_edit.setValidator(TASK_ANSWER_VALIDATOR)
        self.height_line_edit.setPlaceholderText("cm")
        self.height_line_edit.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
        self.height_line_edit.textChanged.connect(self.set_height)
        self.scene_control_vertical_layout.addWidget(self.height_line_edit, 2, 1, 1, 1)

        self.height_label = QtWidgets.QLabel("Magasság(cm)", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.height_label.setFont(font)
        self.height_label.setObjectName("height_label")
        self.scene_control_vertical_layout.addWidget(self.height_label, 2, 2, 1, 1)

        self.add_vector_btn = QtWidgets.QPushButton("Új erő", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.add_vector_btn.setFont(font)
        self.add_vector_btn.setObjectName("add_vector_btn")
        self.add_vector_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}\n"
                                    "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}")
        self.add_vector_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.add_vector_btn.clicked.connect(self.add_vector)
        self.scene_control_vertical_layout.addWidget(self.add_vector_btn, 3, 0, 1, 1)

        self.rotation_line_edit = QtWidgets.QLineEdit(parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.rotation_line_edit.setMaximumWidth(80)
        self.rotation_line_edit.setFont(font)
        self.rotation_line_edit.setObjectName("rotation_line_edit")
        self.rotation_line_edit.setValidator(TASK_ANSWER_VALIDATOR)
        self.rotation_line_edit.setPlaceholderText("°")
        self.rotation_line_edit.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
        self.rotation_line_edit.textChanged.connect(self.set_rotation)
        self.scene_control_vertical_layout.addWidget(self.rotation_line_edit, 3, 1, 1, 1)

        self.rotation_label = QtWidgets.QLabel("Elforgás(°)", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.rotation_label.setFont(font)
        self.rotation_label.setObjectName("rotation_label")
        self.scene_control_vertical_layout.addWidget(self.rotation_label, 3, 2, 1, 1)

        self.add_text_btn = QtWidgets.QPushButton("Szöveg", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.add_text_btn.setFont(font)
        self.add_text_btn.setObjectName("add_text_btn")
        self.add_text_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}\n"
                                    "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}")
        self.add_text_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.add_text_btn.clicked.connect(self.add_text)
        self.scene_control_vertical_layout.addWidget(self.add_text_btn, 4, 0, 1, 1)

        self.up_btn = QtWidgets.QPushButton("Felvitel", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.up_btn.setFont(font)
        self.up_btn.setObjectName("up")
        self.up_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}\n"
                                    "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}")
        self.up_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.up_btn.clicked.connect(self.object_up)
        self.scene_control_vertical_layout.addWidget(self.up_btn, 4, 1, 1, 1)

        self.down_btn = QtWidgets.QPushButton("Levitel", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.down_btn.setFont(font)
        self.down_btn.setObjectName("down_btn")
        self.down_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}\n"
                                    "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}")
        self.down_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.down_btn.clicked.connect(self.object_down)
        self.scene_control_vertical_layout.addWidget(self.down_btn, 4, 2, 1, 1)

        self.remove_btn = QtWidgets.QPushButton("Eltávolítás", parent=self.scene_control_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.remove_btn.setFont(font)
        self.remove_btn.setObjectName("remove_btn")
        self.remove_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}\n"
                                    "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:10px;padding-right:10px;}")
        self.remove_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.remove_btn.clicked.connect(self.remove_object)
        self.scene_control_vertical_layout.addWidget(self.remove_btn, 5, 0, 1, 3)

        
        """spacerItem33 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.scene_horizontal_layout.addItem(spacerItem33, 0, 0)"""

        #self.scene_horizontal_layout.addWidget(self.scene_control_group_box, 0, 1)
        self.scene_horizontal_layout.addWidget(self.scene_control_group_box, 0, 0)
        
        self.scene=None
        view=None

        match task_page.window_size_index:
            case 0:
                height, width = 200,200
            case 1:
                height, width=375,660
            case 2:
                height, width=450,800

        self.scene = QtWidgets.QGraphicsScene()
        self.scene.setSceneRect(0, 0, width, height)
        self.rect(width, height, 2)
        view = QtWidgets.QGraphicsView(self.scene)#, parent=self.scene_group_box)
        view.setMinimumSize(width, height)
        #self.scene_horizontal_layout.addWidget(view, 0, 2)
        self.scene_horizontal_layout.addWidget(view, 0, 1)

        """spacerItem22 = QtWidgets.QSpacerItem(80, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.scene_horizontal_layout.addItem(spacerItem22, 0, 3)"""

        #self.task_vertical_layout.addWidget(self.scene_group_box)
        self.task_vertical_layout.addWidget(self.scene_group_box, alignment=QtCore.Qt.AlignmentFlag.AlignHCenter)

        self.question_group_box = QtWidgets.QGroupBox(parent=self.task_group_box)
        self.question_group_box.setMinimumSize(QtCore.QSize(720, 45))
        self.question_group_box.setStyleSheet("border:none")
        self.question_group_box.setTitle("")
        self.question_group_box.setObjectName("question_group_box")

        self.question_horizontal_layout = QtWidgets.QHBoxLayout(self.question_group_box)
        self.question_horizontal_layout.setContentsMargins(0, 0, 0, 0)
        self.question_horizontal_layout.setObjectName("question_horizontal_layout")
        self.question_horizontal_layout.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)

        spacerItem1 = QtWidgets.QSpacerItem(0, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.question_horizontal_layout.addItem(spacerItem1)

        self.question_line_edit = QtWidgets.QTextEdit(self.data["question"], parent=self.question_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Maximum)
        self.question_line_edit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.question_line_edit.setFont(font)
        self.question_line_edit.setMinimumSize(QtCore.QSize(self.static["topic"]["desc-width"]*2, self.static["topic"]["height"]))
        self.question_line_edit.setObjectName("question_line_edit")
        self.question_horizontal_layout.addWidget(self.question_line_edit)
        

        spacerItem2 = QtWidgets.QSpacerItem(0, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.question_horizontal_layout.addItem(spacerItem2)

        self.task_vertical_layout.addWidget(self.question_group_box)

        self.answer_group_box = QtWidgets.QGroupBox(parent=self.task_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHeightForWidth(self.answer_group_box.sizePolicy().hasHeightForWidth())
        self.answer_group_box.setSizePolicy(sizePolicy)
        self.answer_group_box.setStyleSheet("border: none")
        self.answer_group_box.setTitle("")
        self.answer_group_box.setObjectName("answer_group_box")

        self.answer_horizontal_layout = QtWidgets.QHBoxLayout(self.answer_group_box)
        self.answer_horizontal_layout.setContentsMargins(0, 0, 0, 0)
        self.answer_horizontal_layout.setObjectName("answer_horizontal_layout")

        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.answer_horizontal_layout.addItem(spacerItem3)

        self.answer_line_edit = QtWidgets.QLineEdit(self.data["answer"], parent=self.answer_group_box)
        self.answer_line_edit.setMinimumSize(QtCore.QSize(int(self.static["topic"]["desc-width"]*1.5), int(self.static["topic"]["height"]/2)))
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.answer_line_edit.setFont(font)
        self.answer_line_edit.setObjectName("answer_line_edit")
        self.answer_horizontal_layout.addWidget(self.answer_line_edit)

        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.answer_horizontal_layout.addItem(spacerItem4)

        self.task_vertical_layout.addWidget(self.answer_group_box)

        self.save_or_new_group_box = QtWidgets.QGroupBox(parent=self.task_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.save_or_new_group_box.sizePolicy().hasHeightForWidth())
        self.save_or_new_group_box.setSizePolicy(sizePolicy)
        self.save_or_new_group_box.setStyleSheet("border: none")
        self.save_or_new_group_box.setTitle("")
        self.save_or_new_group_box.setObjectName("save_or_new_group_box")

        self.answer_horizontal_layout = QtWidgets.QHBoxLayout(self.save_or_new_group_box)
        self.answer_horizontal_layout.setContentsMargins(0, 0, 0, 40)
        self.answer_horizontal_layout.setSpacing(10)
        self.answer_horizontal_layout.setObjectName("answer_horizontal_layout")

        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.answer_horizontal_layout.addItem(spacerItem3)

        self.save_btn = QtWidgets.QPushButton(parent=self.save_or_new_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.save_btn.sizePolicy().hasHeightForWidth())
        self.save_btn.setSizePolicy(sizePolicy)
        self.save_btn.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.save_btn.setFont(font)
        self.save_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.save_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:20px;padding-right:20px;}\n"
                                    "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:20px;padding-right:20px;}")
        self.save_btn.setObjectName("save_btn")
        self.save_btn.setText(_translate("task_page", "Mentés"))
        self.answer_horizontal_layout.addWidget(self.save_btn)
        self.save_btn.clicked.connect(task_page.save_task)

        self.new_btn = QtWidgets.QPushButton(parent=self.save_or_new_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.new_btn.sizePolicy().hasHeightForWidth())
        self.new_btn.setSizePolicy(sizePolicy)
        self.new_btn.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["text"])
        self.new_btn.setFont(font)
        self.new_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.new_btn.setStyleSheet("QPushButton {background-color: #D9F2D0; border: 2px solid black; border-radius:10; padding-left:20px;padding-right:20px;}\n"
                                    "QPushButton:hover {background-color: #55aa00; border: 2px solid black; border-radius:10; padding-left:20px;padding-right:20px;}")
        self.new_btn.setObjectName("new_btn")
        self.new_btn.setText(_translate("task_page", "Új"))
        self.answer_horizontal_layout.addWidget(self.new_btn)
        self.new_btn.clicked.connect(task_page.get_task)

        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.answer_horizontal_layout.addItem(spacerItem4)

        self.task_vertical_layout.addWidget(self.save_or_new_group_box)

        self.task_page_vertical_layout.addWidget(self.task_group_box)

        QtCore.QMetaObject.connectSlotsByName(task_page)

    def setupUi(self, task_page):
        task_page.setObjectName("task_page")
        task_page.resize(720, 480)
        task_page.setMinimumSize(QtCore.QSize(720, 480))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(217, 242, 208))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(131, 203, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(217, 242, 208))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(131, 203, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(217, 242, 208))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(131, 203, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(131, 203, 235))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        task_page.setPalette(palette)

        self.task_page_vertical_layout = QtWidgets.QVBoxLayout(task_page)
        self.task_page_vertical_layout.setContentsMargins(0, 0, 0, 0)
        self.task_page_vertical_layout.setSpacing(10)
        self.task_page_vertical_layout.setObjectName("task_page_vertical_layout")
        self.task_page_vertical_layout.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)

        self.menu_group_box = QtWidgets.QGroupBox(parent=task_page)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHeightForWidth(self.menu_group_box.sizePolicy().hasHeightForWidth())
        self.menu_group_box.setSizePolicy(sizePolicy)
        self.menu_group_box.setMinimumSize(QtCore.QSize(0, 50))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        self.menu_group_box.setPalette(palette)
        self.menu_group_box.setAutoFillBackground(True)
        self.menu_group_box.setStyleSheet("")
        self.menu_group_box.setTitle("")
        self.menu_group_box.setObjectName("menu_group_box")

        self.menu_horizontal_layout = QtWidgets.QHBoxLayout(self.menu_group_box)
        self.menu_horizontal_layout.setContentsMargins(self.static["menu"]["layout"]["left"], self.static["menu"]["layout"]["top"], self.static["menu"]["layout"]["right"], self.static["menu"]["layout"]["bottom"])
        self.menu_horizontal_layout.setSpacing(self.static["menu"]["layout"]["spacing"])
        self.menu_horizontal_layout.setObjectName("menu_horizontal_layout")
        self.menu_label = QtWidgets.QLabel(parent=self.menu_group_box)
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["title"])
        self.menu_label.setFont(font)
        self.menu_label.setObjectName("menu_label")
        self.menu_horizontal_layout.addWidget(self.menu_label)

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.menu_horizontal_layout.addItem(spacerItem)

        self.font_size_combo_box = QtWidgets.QComboBox(parent=self.menu_group_box)
        self.font_size_combo_box.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["size-menu"])
        self.font_size_combo_box.setFont(font)
        self.font_size_combo_box.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.font_size_combo_box.setStyleSheet("")
        self.font_size_combo_box.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToContents)
        self.font_size_combo_box.setObjectName("font_size_combo_box")
        self.font_size_combo_box.addItem("")
        self.font_size_combo_box.addItem("")
        self.font_size_combo_box.addItem("")
        self.menu_horizontal_layout.addWidget(self.font_size_combo_box)
        self.font_size_combo_box.setHidden(True)

        self.back_to_topics_cmd_link_btn = QtWidgets.QCommandLinkButton(parent=self.menu_group_box)
        self.back_to_topics_cmd_link_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.back_to_topics_cmd_link_btn.setMinimumSize(QtCore.QSize(self.static["menu"]["backtrack-width"], 45))
        self.back_to_topics_cmd_link_btn.setMaximumSize(QtCore.QSize(self.static["menu"]["backtrack-width-big"], 45))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(self.static["font-sizes"]["text"])
        self.back_to_topics_cmd_link_btn.setFont(font)
        self.back_to_topics_cmd_link_btn.setObjectName("back_to_topics_cmd_link_btn")
        icon = QtGui.QIcon('utils/images/left-arrow.png')           
        self.back_to_topics_cmd_link_btn.setIcon(icon)
        self.menu_horizontal_layout.addWidget(self.back_to_topics_cmd_link_btn)
        self.task_page_vertical_layout.addWidget(self.menu_group_box)

        self.title_group_box = QtWidgets.QGroupBox(parent=task_page)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Maximum)
        self.title_group_box.setSizePolicy(sizePolicy)
        self.title_group_box.setStyleSheet("border:none;")
        self.title_group_box.setTitle("")
        self.title_group_box.setObjectName("title_group_box")
        self.title_horizontal_layout = QtWidgets.QHBoxLayout(self.title_group_box)
        self.title_horizontal_layout.setContentsMargins(self.static["subtitle-margin-left"], 0, self.static["subtitle-margin-left"], 0)
        self.title_horizontal_layout.setSpacing(self.static["subtitle-spacing"])
        self.title_horizontal_layout.setObjectName("title_horizontal_layout")
        self.task_label = QtWidgets.QLabel(parent=self.title_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHeightForWidth(self.task_label.sizePolicy().hasHeightForWidth())
        self.task_label.setSizePolicy(sizePolicy)
        self.task_label.setMinimumSize(QtCore.QSize(140, 30))
        font = QtGui.QFont()
        font.setPointSize(self.static["font-sizes"]["subtitle"])
        self.task_label.setFont(font)
        self.task_label.setStyleSheet("")
        self.task_label.setObjectName("task_label")
        self.title_horizontal_layout.addWidget(self.task_label)

        self.task_page_vertical_layout.addWidget(self.title_group_box)

        self.task_group_box = QtWidgets.QGroupBox(parent=task_page)
        self.task_group_box.setStyleSheet("border:none;")
        self.task_group_box.setTitle("")
        self.task_group_box.setObjectName("task_group_box")
        self.task_vertical_layout = QtWidgets.QVBoxLayout(self.task_group_box)
        self.task_vertical_layout.setContentsMargins(0, 0, 0, 0)
        self.task_vertical_layout.setSpacing(10)
        self.task_vertical_layout.setObjectName("task_vertical_layout")
        
        self.task_page_vertical_layout.addWidget(self.task_group_box)
        self.retranslateUi(task_page)


        match task_page.user_settings['font-size']:
            case 'small':
                self.font_size_combo_box.setCurrentIndex(0)
            case 'medium':
                self.font_size_combo_box.setCurrentIndex(1)
            case 'big':
                self.font_size_combo_box.setCurrentIndex(2)

        QtCore.QMetaObject.connectSlotsByName(task_page)

    def retranslateUi(self, task_page):
        _translate = QtCore.QCoreApplication.translate
        task_page.setWindowTitle(_translate("task_page", "SmartStudy"))
        task_page.setWindowIcon(QtGui.QIcon("utils/images/window-icon.png"))
        self.font_size_combo_box.setItemText(0, _translate("task_page", "Kis betűméret"))
        self.font_size_combo_box.setItemText(1, _translate("task_page", "Közepes betűméret"))
        self.font_size_combo_box.setItemText(2, _translate("task_page", "Nagy betűméret"))
        self.back_to_topics_cmd_link_btn.setText(_translate("task_page", "Vissza a szintekhez"))
        self.task_label.setText(_translate("task_page", "Gyakorló feladat"))
